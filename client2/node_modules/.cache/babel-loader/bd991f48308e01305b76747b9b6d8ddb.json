{"ast":null,"code":"const CountingRows = data => {\n  const getData = () => {\n    let rows = []; // Check first direction\n\n    if (data.end[0].direction === \"B\") {\n      rows.push(data.end[0]);\n    } else {\n      data.end[0].quantity = 0 - parseInt(data.end[0].quantity);\n      rows.push(data.end[0]);\n    }\n\n    data.end.shift();\n    let j = 0; // Count quantity \n\n    data.end.forEach((element, index) => {\n      if (rows[j].client === element.client && rows[j].instrument === element.instrument) {\n        if (element.direction === \"B\") {\n          rows[j].quantity += parseInt(element.quantity);\n        } else {\n          rows[j].quantity -= parseInt(element.quantity);\n        }\n      } else {\n        if (element.direction === \"B\") {\n          rows.push(element);\n        } else {\n          element.quantity = 0 - parseInt(element.quantity);\n          rows.push(element);\n        }\n\n        j++;\n      }\n    });\n    return rows;\n  };\n};\n\n_c = CountingRows;\nexport default CountingRows;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountingRows\");","map":{"version":3,"sources":["C:/Python/Project 1/client/src/components/countRows/CountingRows.js"],"names":["CountingRows","data","getData","rows","end","direction","push","quantity","parseInt","shift","j","forEach","element","index","client","instrument"],"mappings":"AACA,MAAMA,YAAY,GAAIC,IAAD,IAAQ;AAGzB,QAAMC,OAAO,GAAC,MAAI;AACd,QAAIC,IAAI,GAAG,EAAX,CADc,CAEd;;AACA,QAAIF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYC,SAAZ,KAAwB,GAA5B,EAAgC;AAC5BF,MAAAA,IAAI,CAACG,IAAL,CAAUL,IAAI,CAACG,GAAL,CAAS,CAAT,CAAV;AACH,KAFD,MAGI;AACAH,MAAAA,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYG,QAAZ,GAAqB,IAAEC,QAAQ,CAACP,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYG,QAAb,CAA/B;AACAJ,MAAAA,IAAI,CAACG,IAAL,CAAUL,IAAI,CAACG,GAAL,CAAS,CAAT,CAAV;AACH;;AAEDH,IAAAA,IAAI,CAACG,GAAL,CAASK,KAAT;AACA,QAAIC,CAAC,GAAG,CAAR,CAZc,CAcd;;AACAT,IAAAA,IAAI,CAACG,GAAL,CAASO,OAAT,CAAiB,CAACC,OAAD,EAASC,KAAT,KAAiB;AAC9B,UAAGV,IAAI,CAACO,CAAD,CAAJ,CAAQI,MAAR,KAAmBF,OAAO,CAACE,MAA3B,IAAqCX,IAAI,CAACO,CAAD,CAAJ,CAAQK,UAAR,KAAuBH,OAAO,CAACG,UAAvE,EAAkF;AAC9E,YAAIH,OAAO,CAACP,SAAR,KAAoB,GAAxB,EAA4B;AACxBF,UAAAA,IAAI,CAACO,CAAD,CAAJ,CAAQH,QAAR,IAAkBC,QAAQ,CAACI,OAAO,CAACL,QAAT,CAA1B;AACH,SAFD,MAGI;AACAJ,UAAAA,IAAI,CAACO,CAAD,CAAJ,CAAQH,QAAR,IAAkBC,QAAQ,CAACI,OAAO,CAACL,QAAT,CAA1B;AACH;AACJ,OAPD,MAOK;AACD,YAAIK,OAAO,CAACP,SAAR,KAAoB,GAAxB,EAA4B;AACxBF,UAAAA,IAAI,CAACG,IAAL,CAAUM,OAAV;AACH,SAFD,MAGI;AACAA,UAAAA,OAAO,CAACL,QAAR,GAAiB,IAAEC,QAAQ,CAACI,OAAO,CAACL,QAAT,CAA3B;AACAJ,UAAAA,IAAI,CAACG,IAAL,CAAUM,OAAV;AACH;;AACDF,QAAAA,CAAC;AAEJ;AACJ,KAnBD;AAoBA,WAAOP,IAAP;AACH,GApCD;AAuCH,CA1CD;;KAAMH,Y;AA2CN,eAAeA,YAAf","sourcesContent":["\r\nconst CountingRows = (data)=>{\r\n    \r\n\r\n    const getData=()=>{\r\n        let rows = [];\r\n        // Check first direction\r\n        if (data.end[0].direction===\"B\"){\r\n            rows.push(data.end[0])\r\n        }\r\n        else{\r\n            data.end[0].quantity=0-parseInt(data.end[0].quantity)\r\n            rows.push(data.end[0])\r\n        }\r\n    \r\n        data.end.shift()\r\n        let j = 0;\r\n    \r\n        // Count quantity \r\n        data.end.forEach((element,index)=>{\r\n            if(rows[j].client === element.client && rows[j].instrument === element.instrument){\r\n                if (element.direction===\"B\"){\r\n                    rows[j].quantity+=parseInt(element.quantity)\r\n                }\r\n                else{\r\n                    rows[j].quantity-=parseInt(element.quantity)\r\n                }\r\n            }else{\r\n                if (element.direction===\"B\"){\r\n                    rows.push(element)\r\n                }\r\n                else{\r\n                    element.quantity=0-parseInt(element.quantity)\r\n                    rows.push(element)\r\n                }\r\n                j++;\r\n    \r\n            }\r\n        })\r\n        return rows;    \r\n    }\r\n    \r\n    \r\n}\r\nexport default CountingRows"]},"metadata":{},"sourceType":"module"}