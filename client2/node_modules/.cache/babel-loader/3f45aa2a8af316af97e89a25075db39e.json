{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst CountingRows = url => {\n  _s();\n\n  const products = [{\n    trade_id: \"1\",\n    client: 'Shoes',\n    instrument: 'Running Shoes.',\n    quantity: \"asdasd\",\n    direction: \"asdasd\"\n  }, {\n    trade_id: 1,\n    client: 'Shoes',\n    instrument: 'Running Shoes.',\n    quantity: \"asdasd\",\n    direction: \"asdasd\"\n  }];\n  const [trades, setTrades] = useState(products);\n  const [pageIsLoad, setPageIsLoad] = useState(0);\n  const [countPage, setCountPage] = useState(0);\n  const [countRow, setCountRow] = useState(0);\n  const limitCountPage = 10;\n\n  const getData = () => {};\n\n  useEffect(() => {\n    fetch(\"/selectTr\", {\n      method: \"GET\"\n    }).then(res => res.json()).then(data => {\n      let d = CountingRowsByData(data); // setRows(d)\n      // console.log(d)\n\n      setPageIsLoad(true);\n      setTrades(d);\n      setCountRow(d.length);\n      let pages = d.length / limitCountPage;\n      setCountPage(pages); // console.log(\"countRow=>\"+countRow)\n    });\n  }, []);\n\n  function CountingRowsByData(data) {\n    data.end.sort(function (a, b) {\n      return a.instrument.localeCompare(b.instrument);\n    });\n    data.end.sort(function (a, b) {\n      return a.client.localeCompare(b.client);\n    });\n    let rows = []; // Check first direction\n\n    if (data.end[0].direction === \"B\") {\n      rows.push(data.end[0]);\n    } else {\n      data.end[0].quantity = 0 - parseInt(data.end[0].quantity);\n      rows.push(data.end[0]);\n    }\n\n    data.end.shift();\n    let j = 0; // Count quantity \n\n    data.end.forEach((element, index) => {\n      if (rows[j].client === element.client && rows[j].instrument === element.instrument) {\n        if (element.direction === \"B\") {\n          rows[j].quantity += parseInt(element.quantity);\n        } else {\n          rows[j].quantity -= parseInt(element.quantity);\n        }\n      } else {\n        if (element.direction === \"B\") {\n          rows.push(element);\n        } else {\n          element.quantity = 0 - parseInt(element.quantity);\n          rows.push(element);\n        }\n\n        j++;\n      }\n    });\n    console.log(\"rows\", rows);\n    return rows;\n  }\n\n  return [{\n    trades,\n    setTrades,\n    pageIsLoad,\n    setPageIsLoad,\n    countPage,\n    setCountPage,\n    countRow,\n    setCountRow\n  }, getData, CountingRowsByData];\n};\n\n_s(CountingRows, \"xu3sVb66kolzyY3N0XXMyHWqFZQ=\");\n\n_c = CountingRows;\nexport default CountingRows;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountingRows\");","map":{"version":3,"sources":["C:/Python/Project 1/client/src/components/countRows/CountingRows.js"],"names":["useState","useEffect","CountingRows","url","products","trade_id","client","instrument","quantity","direction","trades","setTrades","pageIsLoad","setPageIsLoad","countPage","setCountPage","countRow","setCountRow","limitCountPage","getData","fetch","method","then","res","json","data","d","CountingRowsByData","length","pages","end","sort","a","b","localeCompare","rows","push","parseInt","shift","j","forEach","element","index","console","log"],"mappings":"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","sourcesContent":["import { useState,useEffect } from \"react\";\r\nconst CountingRows = (url)=>{\r\n    const products = [\r\n        {trade_id: \"1\", client: 'Shoes',instrument: 'Running Shoes.',quantity:\"asdasd\",direction:\"asdasd\" },\r\n        {trade_id: 1, client: 'Shoes',instrument: 'Running Shoes.',quantity:\"asdasd\",direction:\"asdasd\" },\r\n    ];\r\n    const [trades,setTrades] = useState(products)\r\n    const [pageIsLoad,setPageIsLoad]= useState(0)   \r\n    const [countPage,setCountPage]=useState(0)\r\n    const [countRow,setCountRow]=useState(0)\r\n    const limitCountPage =10;\r\n\r\n    const getData=()=>{\r\n       \r\n    }\r\n    useEffect(()=>{\r\n        fetch(\"/selectTr\",{\r\n            method:\"GET\",\r\n            \r\n        }).then(\r\n            res=>res.json()\r\n        ).then(data=>{\r\n            \r\n            \r\n            let d = CountingRowsByData(data)\r\n            // setRows(d)\r\n            // console.log(d)\r\n            setPageIsLoad(true)\r\n            setTrades(d)\r\n            setCountRow(d.length)\r\n            let pages =  d.length / limitCountPage\r\n            setCountPage(pages)\r\n            // console.log(\"countRow=>\"+countRow)\r\n        })\r\n    },[])\r\n\r\n    \r\n    function CountingRowsByData(data){\r\n        data.end.sort(function(a,b){\r\n            return a.instrument.localeCompare(b.instrument)\r\n        })\r\n        data.end.sort(function(a,b){\r\n            return a.client.localeCompare(b.client)\r\n        })\r\n        let rows = [];\r\n            // Check first direction\r\n        if (data.end[0].direction===\"B\"){\r\n            rows.push(data.end[0])\r\n        }\r\n        else{\r\n            data.end[0].quantity=0-parseInt(data.end[0].quantity)\r\n            rows.push(data.end[0])\r\n        }\r\n        \r\n        data.end.shift()\r\n        let j = 0;\r\n        \r\n            // Count quantity \r\n        data.end.forEach((element,index)=>{\r\n            if(rows[j].client === element.client && rows[j].instrument === element.instrument){\r\n                if (element.direction===\"B\"){\r\n                    rows[j].quantity+=parseInt(element.quantity)\r\n                }\r\n                else{\r\n                    rows[j].quantity-=parseInt(element.quantity)\r\n                }\r\n            }else{\r\n                if (element.direction===\"B\"){\r\n                    rows.push(element)\r\n                }\r\n                else{\r\n                    element.quantity=0-parseInt(element.quantity)\r\n                    rows.push(element)\r\n                }\r\n                j++;\r\n    \r\n            }\r\n        })\r\n        console.log(\"rows\",rows)\r\n        return rows   \r\n    }\r\n    \r\n   \r\n    \r\n    return [{trades,setTrades,pageIsLoad,setPageIsLoad,countPage,setCountPage,countRow,setCountRow},getData,CountingRowsByData]\r\n\r\n   \r\n}\r\n    \r\n\r\nexport default CountingRows"]},"metadata":{},"sourceType":"module"}